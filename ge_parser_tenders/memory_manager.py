import gc
import time
import logging
import psutil


class MemoryManager:
    def __init__(self, warning_threshold_mb=1000, critical_threshold_mb=1500, gc_interval=60):
        self.warning_threshold = warning_threshold_mb * 1024 * 1024
        self.critical_threshold = critical_threshold_mb * 1024 * 1024
        self.last_gc_time = time.time()
        self.gc_interval = gc_interval  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–±–æ—Ä–∫–∞–º–∏ –º—É—Å–æ—Ä–∞

    def check_memory(self) -> bool:
        current_memory = psutil.Process().memory_info().rss

        if current_memory > self.critical_threshold:
            logging.debug(f"üîç –¢–µ–∫—É—â–∞—è –ø–∞–º—è—Ç—å: {current_memory / (1024 * 1024):.2f} MB")
            self.force_cleanup()
            return False

        if current_memory > self.warning_threshold:
            if time.time() - self.last_gc_time > self.gc_interval:
                logging.warning("üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
                self.force_cleanup()

        if current_memory > self.warning_threshold:
            if time.time() - self.last_gc_time > self.gc_interval:
                logging.info("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏. –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏...")
                self.force_cleanup()
        
        return True

    def force_cleanup(self):
        logging.debug("üßπ –ó–∞–ø—É—Å–∫ garbage collection (GC)...")
        gc.collect()
        self.last_gc_time = time.time()
        logging.debug("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")