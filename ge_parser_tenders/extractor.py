"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ + –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
----------------------------------------------------------------
* –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç .pdf / .xls / .xlsx
* –±—ã—Å—Ç—Ä–µ–π—à–∏–π –ø–æ—Ä—è–¥–æ–∫: pypdf ‚Üí pdftotext(poppler) ‚Üí pandas-excel
* fuzzy-–ø–æ–∏—Å–∫ (RapidFuzz) + –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Stanza ‚Äî –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è
"""
from __future__ import annotations
from pathlib import Path
import logging
import shlex
from subprocess import run, PIPE

import pandas as pd

from .config import KEYWORDS_GEO, KEYWORDS_RE          # regex + —Å–ø–∏—Å–æ–∫
from .text_matcher import find_keyword_hits            # ‚Üê –∏–∑ –≤–∞—à–µ–≥–æ text_matcher.py
from .ocr_image import extract_pdf_ocr

DEFAULT_THRESHOLD = 80


# --------------------------------------------------------------------------- #
#                       helpers: pdf / excel  ‚Üí  text                         #
# --------------------------------------------------------------------------- #
def _pdf_to_text_poppler(path: Path) -> str:
    cmd = f"pdftotext -layout -enc UTF-8 {shlex.quote(str(path))} -"
    proc = run(cmd, shell=True, stdout=PIPE, stderr=PIPE, timeout=60)
    return proc.stdout.decode("utf-8", "ignore")


def _xlsx_to_text(path: Path) -> str:
    engine = "openpyxl" if path.suffix == ".xlsx" else "xlrd"
    df = pd.read_excel(path, dtype=str, header=None, engine=engine)
    return "\n".join(df.fillna("").astype(str).agg("\t".join, axis=1))


def extract_text(file_path: Path) -> str:
    suf = file_path.suffix.lower()
    if suf == ".pdf":
        text = ""
        try:                                         # 1) pypdf
            from pypdf import PdfReader
            text = "\n".join((p.extract_text() or "") for p in PdfReader(file_path).pages)
            if len(text.strip()) >= 50:
                return text
            logging.debug("    pypdf –¥–∞–ª –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (%d —Å–∏–º–≤.) ‚Äì –ø—Ä–æ–±—É–µ–º –¥–∞–ª—å—à–µ", len(text))
        except Exception as exc:
            logging.debug("    pypdf failed (%s) ‚Äì –ø—Ä–æ–±—É–µ–º –¥–∞–ª—å—à–µ", exc)
        try:                                         # 2)  poppler           
            text = _pdf_to_text_poppler(file_path)
            if len(text.strip()) >= 50:
                return text
            logging.debug("    poppler –¥–∞–ª –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (%d —Å–∏–º–≤.) ‚Äì –∏–¥—ë–º –≤ OCR", len(text))
        except Exception as exc:
            logging.debug("    poppler failed (%s) ‚Äì –∏–¥—ë–º –≤ OCR", exc)
        try:                                         # 3)  tesseract-ocr
            return extract_pdf_ocr(file_path)
        except Exception as exc:
            logging.warning("%s: OCR failed (%s)", file_path.name, exc)

    if suf in {".xls", ".xlsx"}:                     # Excel
        try:
            return _xlsx_to_text(file_path)
        except Exception as exc:
            logging.warning("%s: excel-extract failed (%s)", file_path.name, exc)

    return ""


# --------------------------------------------------------------------------- #
#                             public API                                      #
# --------------------------------------------------------------------------- #
def file_contains_keywords(
    file_path: Path,
    *,
    threshold: int = DEFAULT_THRESHOLD,
) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ ‚â• –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    (fuzzy-score ‚â• *threshold*).  –ü–∏—à–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥, –ø–æ–≤—Ç–æ—Ä—è—è
    –ø–æ–≤–µ–¥–µ–Ω–∏–µ `keyword_tester.py`.
    """
    logging.info("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º %s", file_path.name)

    text = extract_text(file_path)
    if not text.strip():
        logging.debug("    –ø—É—Å—Ç–æ–π/–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        return False
    logging.debug("    –∏–∑–≤–ª–µ—á–µ–Ω–æ %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

    # ‚îÄ‚îÄ –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Ñ–∏–ª—å—Ç—Ä regex ‚Äï —Ä–µ–∑–∫–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ fuzzy-—Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    if not KEYWORDS_RE.search(text):
        logging.debug("    regex –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fuzzy + –ª–µ–º–º–∞–º")
    else:
        logging.debug("    ‚ö° regex —Å–æ–≤–ø–∞–ª ‚Äî —É—Ç–æ—á–Ω—è–µ–º fuzzy-—Å–∫–æ—Ä")

    hits = find_keyword_hits(text, KEYWORDS_GEO, threshold=threshold)
    logging.info("    –Ω–∞–π–¥–µ–Ω–æ %d –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (‚â•%d)", len(hits), threshold)

    # –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (DEBUG-—É—Ä–æ–≤–µ–Ω—å)
    if hits and logging.getLogger().isEnabledFor(logging.DEBUG):
        for kw, score in sorted(hits.items(), key=lambda t: -t[1]):
            logging.debug("        %-60s  score=%d", kw, score)

    return bool(hits)
