# ge_parser_tenders/ocr_image.py
from __future__ import annotations
from pathlib import Path
import logging
import tempfile

from pdf2image import convert_from_path          # poppler
import pytesseract                               # tesseract-ocr ‚â• 5.3
from PIL import Image

__all__ = ["extract_pdf_ocr"]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# one-page OCR helper
def _ocr_image(img: Image.Image, lang: str = "ka+eng") -> str:
    # Tesseract 5: download traineddata 'ka' once: `tesseract --list-langs`
    return pytesseract.image_to_string(img, lang=lang, config="--psm 6")

def extract_pdf_ocr(pdf_path: Path, *, dpi: int = 300) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ PNG ‚Üí —Å–∫–∞—Ä–º–ª–∏–≤–∞–µ—Ç Tesseract.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç concatenated-—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞.
    """
    logging.info("    üñº  OCR-—ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è (pdf2image, %d dpi)‚Ä¶", dpi)
    text_parts: list[str] = []
    with tempfile.TemporaryDirectory() as tmp:
        images = convert_from_path(
            pdf_path, dpi=dpi, output_folder=tmp, fmt="png",
            thread_count=4, single_file=False
        )
        for idx, img in enumerate(images, 1):
            logging.debug("        ‚ñ∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %02d", idx)
            ocr = _ocr_image(img)
            text_parts.append(ocr)
    return "\n".join(text_parts)
